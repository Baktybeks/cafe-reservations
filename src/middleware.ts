// src/middleware.ts - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è

import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { UserRole } from "@/types";

export function middleware(request: NextRequest) {
  const path = request.nextUrl.pathname;
  console.log(`üõ°Ô∏è Middleware: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ ${path}`);

  // –ü–æ–ª—É—á–∞–µ–º auth cookie
  const authSession = request.cookies.get("auth-storage");
  console.log("üç™ Auth cookie –Ω–∞–π–¥–µ–Ω:", !!authSession);
  console.log("üç™ Auth cookie value:", authSession?.value ? "–µ—Å—Ç—å" : "–Ω–µ—Ç");

  let user = null;

  if (authSession) {
    try {
      const parsed = JSON.parse(authSession.value);
      user = parsed.state?.user;
      console.log(
        "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ cookie:",
        user
          ? {
              id: user.$id,
              email: user.email,
              role: user.role,
              isActive: user.isActive,
            }
          : null
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ auth-session:", error);
    }
  }

  const isAuthenticated = !!user && user.$id && user.email && user.role;
  const isActive = user?.isActive === true;

  console.log("üîç –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", {
    isAuthenticated,
    isActive,
    userRole: user?.role,
    path,
  });

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ü–ï–†–í–´–ú–ò
  if (path.startsWith("/restaurants/")) {
    console.log("üè™ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ - –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø");
    return NextResponse.next();
  }

  // API –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  if (
    path.startsWith("/api") ||
    path.startsWith("/_next") ||
    path.includes(".") ||
    path.startsWith("/favicon")
  ) {
    console.log("üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –∏–ª–∏ API - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
    return NextResponse.next();
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const publicPaths = ["/", "/restaurants", "/login", "/register"];
  const isPublicPath = publicPaths.includes(path);

  if (isPublicPath) {
    console.log("üåê –ü—É–±–ª–∏—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø");
    return NextResponse.next();
  }

  // –°—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
  if (path.startsWith("/login") || path.startsWith("/register")) {
    if (isAuthenticated && isActive) {
      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ä–æ–ª–∏");
      return redirectByRole(user.role, request);
    }
    console.log("üìÑ –î–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω");
    return NextResponse.next();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  if (!isAuthenticated) {
    console.log("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /login");
    const loginUrl = new URL("/login", request.url);
    return NextResponse.redirect(loginUrl);
  }

  if (!isActive) {
    console.log("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /login");
    const loginUrl = new URL("/login", request.url);
    return NextResponse.redirect(loginUrl);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª—è–º
  if (path.startsWith("/admin")) {
    if (user.role !== UserRole.ADMIN) {
      console.log("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è /admin, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ä–æ–ª–∏");
      return redirectByRole(user.role, request);
    }
    console.log("‚úÖ –î–æ—Å—Ç—É–ø –∫ /admin —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è ADMIN");
  }

  if (path.startsWith("/restaurant-owner")) {
    if (![UserRole.ADMIN, UserRole.RESTAURANT_OWNER].includes(user.role)) {
      console.log(
        "üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è /restaurant-owner, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ä–æ–ª–∏"
      );
      return redirectByRole(user.role, request);
    }
    console.log("‚úÖ –î–æ—Å—Ç—É–ø –∫ /restaurant-owner —Ä–∞–∑—Ä–µ—à–µ–Ω");
  }

  if (path.startsWith("/customer")) {
    if (![UserRole.ADMIN, UserRole.CUSTOMER].includes(user.role)) {
      console.log("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è /customer, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Ä–æ–ª–∏");
      return redirectByRole(user.role, request);
    }
    console.log("‚úÖ –î–æ—Å—Ç—É–ø –∫ /customer —Ä–∞–∑—Ä–µ—à–µ–Ω");
  }

  console.log("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º");
  return NextResponse.next();
}

function redirectByRole(role: UserRole, request: NextRequest) {
  let targetPath: string;

  switch (role) {
    case UserRole.ADMIN:
      targetPath = "/admin";
      console.log("üëë –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ADMIN –Ω–∞ /admin");
      break;
    case UserRole.RESTAURANT_OWNER:
      targetPath = "/restaurant-owner";
      console.log("üè™ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RESTAURANT_OWNER –Ω–∞ /restaurant-owner");
      break;
    case UserRole.CUSTOMER:
      targetPath = "/customer";
      console.log("üë§ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ CUSTOMER –Ω–∞ /customer");
      break;
    default:
      targetPath = "/login";
      console.log("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /login");
  }

  const url = new URL(targetPath, request.url);
  console.log(
    `üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç: ${request.nextUrl.pathname} ‚Üí ${targetPath}`
  );
  return NextResponse.redirect(url);
}

export const config = {
  matcher: [
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–∞–µ–º matcher
    "/((?!api|_next/static|_next/image|favicon.ico).*)",
  ],
};
