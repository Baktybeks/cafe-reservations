// scripts/testConnection.js - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Appwrite

const { Client, Databases, Account } = require("node-appwrite");
require("dotenv").config({ path: ".env.local" });

const appwriteConfig = {
  endpoint:
    process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT || "https://cloud.appwrite.io/v1",
  projectId: process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID || "",
  databaseId: process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID || "",
  apiKey: process.env.APPWRITE_API_KEY || "",
};

const client = new Client()
  .setEndpoint(appwriteConfig.endpoint)
  .setProject(appwriteConfig.projectId)
  .setKey(appwriteConfig.apiKey);

const databases = new Databases(client);
const account = new Account(client);

async function testConnection() {
  console.log("üîß RestaurantBooking - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Appwrite\n");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:");
  console.log(`   Endpoint: ${appwriteConfig.endpoint}`);
  console.log(
    `   Project ID: ${
      appwriteConfig.projectId ? "‚úÖ –ù–∞–π–¥–µ–Ω" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    }`
  );
  console.log(
    `   Database ID: ${
      appwriteConfig.databaseId ? "‚úÖ –ù–∞–π–¥–µ–Ω" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    }`
  );
  console.log(
    `   API Key: ${appwriteConfig.apiKey ? "‚úÖ –ù–∞–π–¥–µ–Ω" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n`
  );

  if (
    !appwriteConfig.projectId ||
    !appwriteConfig.databaseId ||
    !appwriteConfig.apiKey
  ) {
    console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!");
    console.log("\nüí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.local —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:");
    console.log("   NEXT_PUBLIC_APPWRITE_PROJECT_ID=your_project_id");
    console.log("   NEXT_PUBLIC_APPWRITE_DATABASE_ID=your_database_id");
    console.log("   APPWRITE_API_KEY=your_api_key");
    return;
  }

  try {
    // –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É
    console.log("üîå –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É...");
    const health = await fetch(`${appwriteConfig.endpoint}/health`);
    if (health.ok) {
      console.log("   ‚úÖ Appwrite —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω");
    } else {
      console.log("   ‚ùå Appwrite —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      return;
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    console.log("\nüîë –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞...");
    try {
      const database = await databases.get(appwriteConfig.databaseId);
      console.log(`   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: ${database.name}`);
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
      return;
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    console.log("\nüìö –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π...");
    const requiredCollections = [
      "users",
      "restaurants",
      "tables",
      "bookings",
      "reviews",
    ];

    try {
      const collections = await databases.listCollections(
        appwriteConfig.databaseId
      );
      console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${collections.collections.length}`);

      for (const collectionName of requiredCollections) {
        const found = collections.collections.find(
          (c) => c.name === collectionName
        );
        if (found) {
          console.log(`   ‚úÖ ${collectionName} (ID: ${found.$id})`);
        } else {
          console.log(`   ‚ùå ${collectionName} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
      }

      const missingCollections = requiredCollections.filter(
        (name) => !collections.collections.find((c) => c.name === name)
      );

      if (missingCollections.length > 0) {
        console.log(
          `\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${missingCollections.join(", ")}`
        );
        console.log("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run db:setup");
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${error.message}`);
      return;
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    console.log("\nüõ°Ô∏è  –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...");
    try {
      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (–µ—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      const usersCollection = await databases.listCollections(
        appwriteConfig.databaseId
      );
      const usersCol = usersCollection.collections.find(
        (c) => c.name === "users"
      );

      if (usersCol) {
        try {
          const testDoc = await databases.createDocument(
            appwriteConfig.databaseId,
            usersCol.$id,
            "test-connection",
            {
              name: "Test User",
              email: "test@example.com",
              role: "CUSTOMER",
              isActive: false,
              createdAt: new Date().toISOString(),
            }
          );

          // –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
          await databases.deleteDocument(
            appwriteConfig.databaseId,
            usersCol.$id,
            testDoc.$id
          );

          console.log("   ‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å - OK");
        } catch (error) {
          if (error.code === 409) {
            console.log("   ‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å - OK (–¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)");
          } else {
            console.log(
              `   ‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: ${error.message}`
            );
          }
        }
      }
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞: ${error.message}`);
    }

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log("\n‚ö° –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");
    const startTime = Date.now();
    try {
      await databases.get(appwriteConfig.databaseId);
      const responseTime = Date.now() - startTime;
      console.log(`   ‚úÖ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms`);

      if (responseTime < 500) {
        console.log("   üöÄ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!");
      } else if (responseTime < 1000) {
        console.log("   üëç –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");
      } else {
        console.log("   ‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
      }
    } catch (error) {
      console.log(
        `   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${error.message}`
      );
    }

    console.log("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
    console.log("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
    console.log("   1. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: npm run db:setup");
    console.log("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev");
    console.log("   3. –û—Ç–∫—Ä—ã—Ç—å: http://localhost:3000");
  } catch (error) {
    console.error("\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error.message);
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:");
    console.log("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
    console.log("   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞");
    console.log("   - –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Appwrite Console");
    console.log("   - –ü—Ä–∞–≤–∞ API –∫–ª—é—á–∞");
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π
async function checkCollectionStructure() {
  console.log("\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π:\n");

  const requiredCollections = {
    users: ["name", "email", "role", "isActive"],
    restaurants: ["name", "description", "ownerId", "status", "address"],
    tables: ["restaurantId", "tableNumber", "capacity", "type"],
    bookings: ["restaurantId", "customerId", "tableId", "date", "timeSlot"],
    reviews: ["restaurantId", "customerId", "rating", "comment"],
  };

  try {
    const collections = await databases.listCollections(
      appwriteConfig.databaseId
    );

    for (const [collectionName, requiredAttributes] of Object.entries(
      requiredCollections
    )) {
      const collection = collections.collections.find(
        (c) => c.name === collectionName
      );

      if (collection) {
        console.log(`üìã ${collectionName}:`);

        try {
          const attributes = await databases.listAttributes(
            appwriteConfig.databaseId,
            collection.$id
          );

          for (const attrName of requiredAttributes) {
            const found = attributes.attributes.find((a) => a.key === attrName);
            if (found) {
              console.log(`   ‚úÖ ${attrName} (${found.type})`);
            } else {
              console.log(`   ‚ùå ${attrName} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
            }
          }

          console.log(`   üìä –í—Å–µ–≥–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: ${attributes.attributes.length}`);
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤: ${error.message}`);
        }
      } else {
        console.log(`üìã ${collectionName}: ‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
      console.log("");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:", error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function getStatistics() {
  console.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n");

  try {
    const collections = await databases.listCollections(
      appwriteConfig.databaseId
    );

    for (const collection of collections.collections) {
      try {
        const documents = await databases.listDocuments(
          appwriteConfig.databaseId,
          collection.$id,
          undefined,
          1 // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ 1 –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        );

        console.log(`üìö ${collection.name}: ${documents.total} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
      } catch (error) {
        console.log(
          `üìö ${collection.name}: –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ (${error.message})`
        );
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error.message);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const command = process.argv[2];

  switch (command) {
    case "structure":
      await checkCollectionStructure();
      break;
    case "stats":
      await getStatistics();
      break;
    case "full":
      await testConnection();
      await checkCollectionStructure();
      await getStatistics();
      break;
    default:
      await testConnection();
      break;
  }
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  testConnection,
  checkCollectionStructure,
  getStatistics,
};
